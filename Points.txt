www.python.org

versions of python
------------------
2.x and 3.x

1. syntax changes			-> print "hello"		=>	print("Hello")

2. many libraries are deprecated


Falvours of python
-------------------
1. Cpython 							-		currently using
2. Jython								-		convert python code to java code
3. Iron Python					- 	use dotnet libraries

Editors
-------
1. Notepad++	
2. Pycharm	Community edition

3. Eclipse
4. VS code Community edition
5. Sublime text

python 3.10.x
--------------
1. sdk
2. IDLE				- integrated development environment
3. Shell		

two operators overloaded are + and *

Module - imp
method - reload	


Coding Rules
-------------
#! 		-	 Shebang		-	path of python executable

Comments
---------
# - Single line comment

strings are stored
------------------
single line string -  "  " or '  '

multiple line string  - """   """ or  '''   '''

"this is a sample string"

"""
this is a sample string
this is a sample string
this is a sample string
this is a sample string
this is a sample string
this is a sample string
this is a sample string
"""

Indentations
------------
1. loops
2. if condition
3. functions

C, c++
------
void function fun()
{
	print("function code")
}


Python
-------
def fun():
	print("function fun code....")

	for i in range(1, 11):
		print("for loop code...")
			
			if i % 2 == 0:
				print("if condition code...")
				print (i)
		
		print("for loop code...")

	print("function fun code....")


print(" module __main__ code")


Primitive data types
--------------------
1. Number 
	a. integer
	b. float
	c. complex numbers

2. Strings

3. Boolean

control structures
------------------
if condition

var = input(prompt)

data type of var is string


Loops
-----
1. for loop

for each loop in other tech - it relies on a collection that is generated by range function


2. while loop


print
-----
print(data, sep=, end = "\n")



5 binary
3 binary 

0101
0011
----
0111			- 7
-----


0101
0011
====
0001
----


0101
0011
----
0110

0101  1010 -> 10100

  8 
1000 -> 10000


Solve the problems
------------------

1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
	 2 1
  3 2 1
 4 3 2 1
5 4 3 2 1

print all prime numbers between 150 and 50 and also print the count of prime numbers


Strings
--------
string are immutable
 

3 equal parts => 1 reminder => give the reminder to the kid


==========================================================================================
                                   Day 2
========================================================================================
Formatting
----------

Data Structures
----------------
1. list
2. Dictionary
3. Tuples
4. Sets

Array
-----
1. collection of homogenous data
2. Memory allocation is contigious


Lists
------
lists are same as arrays
1. lists are a collection of hetrogenous data
2. Memory allocation is not contigious
3. its an ordered collection
4. subscriptable
5. mutable
6. lists are enclosed in [ ]

Functions to manipulate a list

Add elements = append, extend, insert
Delete elements = clear, pop, remove

copy
count
index
reverse
sort

Dictionary
----------
data will be stored in the form of key and value pairs - {k1: v1, k2: v2, k3: v3......}

all keys in a dictionary will be unique
they are unordered collection
all dictionaries are enclosed in { }
they are mutable

Dictionary Manipulation functions
----------------------------------
'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'

Tuples
------
tuples are immutable lists

t = ( )

Sets
----
1. sets are a collection of unique values
2. sets are unordered collection
3. sets are not subscriptable
4. sets are mutable
5. sets are also enclosed in { }

Functions
---------
any reusable code kept seperately and called. this piece of code is named and called as functions

lambda syntax
--------------
result of expression = lambda(var1, var2, var3.... : expression)

List and Dictionary comprehension
---------------------------------

===============================================================================
                                DAY- 04
===============================================================================

FileHandle = open(path + filename, "Mode")

Mode =>         r   ->  only read the contents of the file
                w   ->  erase the old contents and write into a file
                a   ->  write contents without disturbing the old contents

Open a file dynamically
-----------------------
1. move your file handle from one location to another
2. you can read the contents of the file

FL.Seek(offset, whence)
    offset - no of bytes
    whence - 0 - BOF
             1 - CP
             2 - EOF

FL.seek(50, 0)
FL.seek(180, 1)
FL.seek(-50, 1)
FL.seek(75, 1)
FL.seek(-50, 2)
FL.seek(200, 2)
FL.seek(-300, 2)
FL.seek(0,2)
FL.seek(-10, 0)


open the emp.csv file and find the following

    a. count of males and females
    b. unique list of dept
    c. unique list of desig
    d. sum of all salaries









